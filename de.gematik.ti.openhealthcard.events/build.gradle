buildscript {
    dependencies {
        classpath "de.gematik:gematik-parent-plugin:1.1.3"
        classpath "de.gematik:documentation-plugin:1.1.2"
    }
}

apply plugin: "de.gematik.parent"
apply plugin: "de.gematik.publish"
apply plugin: "de.gematik.asciidoctor"
apply plugin: "de.gematik.javadoc"

group = 'de.gematik.ti'

description = """OpenHealthCard-Events"""

sourceCompatibility = 1.8
targetCompatibility = 1.8


tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

dependencies {
    def version_cardreader_provider_api = '1.2.1'

    //############# Eventbus #############
    implementation 'org.greenrobot:eventbus:3.1.1'

    implementation group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'

    compileOnly group: 'de.gematik.ti', name: 'cardreader.provider.api', version: version_cardreader_provider_api

    //############# Test #############
    testImplementation group: 'junit', name: 'junit', version: '4.12'
    testImplementation group: 'org.sonarsource.java', name: 'sonar-jacoco-listeners', version: '3.8'
    testImplementation group: 'org.mockito', name: 'mockito-core', version: '3.0.0'
    testImplementation group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: '2.8.1'
    testImplementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.8.1'
    testImplementation group: 'de.gematik.ti', name: 'cardreader.provider.api', version: version_cardreader_provider_api
}


gematikDocumentation {
    projectShortcut = "OHCEVENTS"
    documentVersionReference = "version_openhealthcard_events"
}

gematikPublish {
    name = "OpenHealthCard-Events"
    description = "The OpenHealthCard-Events library contains overarching events for several layers. That includes general events for info, warn and error, request and response events for card access number, etc. The Events are used to use org.greenrobot eventbus."
    gitHubProjectName = "ref-OpenHealthCard-Events"
}

task sourceJar(type: Jar) {
    archiveClassifier.set("sources")
    from "${project.buildDir}/../src/main/java/"
    include "**/*.java"
}
task testSourceJar(type: Jar) {
    archiveClassifier.set("test-sources")
    from "${project.buildDir}/../src/test/java/"
    include "**/*.java"
}
task adocJar(type: Jar) {
    archiveClassifier.set("adoc")
    from "${project.buildDir}/../doc"
    into "${project.name}"
    exclude "**/generated/**/*.*"

}
task javadocJar(type: Jar) {
    archiveClassifier.set("javadoc")
    from "${project.buildDir}/docs/javadoc/"
    into "${project.name}"
}

artifacts {
    archives sourceJar
    archives testSourceJar
    archives adocJar
    archives javadocJar
}


